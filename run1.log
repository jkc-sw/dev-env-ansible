
PLAY [local] *******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [Make sure some system dependencies are installed] ************************
ok: [localhost] => (item=git)
ok: [localhost] => (item=wget)
ok: [localhost] => (item=tree)
ok: [localhost] => (item=curl)

TASK [ansible_dev : Make sure some system dependencies are installed] **********
ok: [localhost] => (item=python3)
ok: [localhost] => (item=python3-pip)

TASK [ansible_dev : Install ansible development related items] *****************
ok: [localhost]

TASK [ctags_from_source : Check if ctags is installed] *************************
ok: [localhost]

TASK [ctags_from_source : Get latest source code for ctags] ********************
ok: [localhost]

TASK [ctags_from_source : Make sure some system dependencies are installed] ****
skipping: [localhost] => (item=git) 
skipping: [localhost] => (item=gcc) 
skipping: [localhost] => (item=make) 
skipping: [localhost] => (item=autoconf) 
skipping: [localhost] => (item=automake) 
skipping: [localhost] => (item=pkg-config) 
skipping: [localhost] => (item=python3-docutils) 
skipping: [localhost] => (item=libseccomp-dev) 
skipping: [localhost] => (item=libjansson-dev) 
skipping: [localhost] => (item=libyaml-dev) 
skipping: [localhost] => (item=libxml2-dev) 

TASK [ctags_from_source : Configure before running build for ctags] ************
skipping: [localhost]

TASK [ctags_from_source : Compile and update ctags] ****************************
skipping: [localhost]

TASK [cargo_and_rustup : Check cargo and rustup is installed] ******************
ok: [localhost]

TASK [cargo_and_rustup : Install cargo and rustup] *****************************
skipping: [localhost]

TASK [cargo_and_rustup : Make sure cargo export is not present in .profile] ****
skipping: [localhost]

TASK [cargo_and_rustup : Check if rls is installed] ****************************
ok: [localhost]

TASK [cargo_and_rustup : Install rls] ******************************************
skipping: [localhost]

TASK [powershell_install : Download and Add Powershell Key to Apt-Get Keyring] ***
ok: [localhost]

TASK [powershell_install : Add Powershell Repository into /etc/apt/sources.list - Bionic] ***
ok: [localhost]

TASK [powershell_install : Install Powershell] *********************************
ok: [localhost]

TASK [powershell_install : Make sure we can install from PSGallery] ************
ok: [localhost]

TASK [powershell_install : Create profile.ps1 directory] ***********************
ok: [localhost]

TASK [powershell_install : Create profile.ps1 when not exist] ******************
ok: [localhost]

TASK [powershell_install : Configure powershell] *******************************
ok: [localhost]

TASK [general_cargo_install : Make sure some system dependencies are installed] ***
ok: [localhost] => (item=libssl-dev)

TASK [general_cargo_install : Install all those fancy variables] ***************
ok: [localhost] => (item={'exe': 'fd', 'crate': 'fd-find'})
ok: [localhost] => (item={'exe': 'rg', 'crate': 'ripgrep'})
ok: [localhost] => (item={'exe': 'bat', 'crate': 'bat'})
ok: [localhost] => (item={'exe': 'starship', 'crate': 'starship'})
ok: [localhost] => (item={'exe': 'dust', 'crate': 'du-dust'})
ok: [localhost] => (item={'exe': 'exa', 'crate': 'exa'})
ok: [localhost] => (item={'exe': 'tokei', 'crate': 'tokei'})
ok: [localhost] => (item={'exe': 'procs', 'crate': 'procs'})
ok: [localhost] => (item={'exe': 'sd', 'crate': 'sd'})

TASK [nvim_from_source : Check if nvim is installed] ***************************
ok: [localhost]

TASK [nvim_from_source : Get latest source code for neovim] ********************
ok: [localhost]

TASK [nvim_from_source : Make sure some system dependencies are installed] *****
skipping: [localhost] => (item=ninja-build) 
skipping: [localhost] => (item=gettext) 
skipping: [localhost] => (item=libtool) 
skipping: [localhost] => (item=libtool-bin) 
skipping: [localhost] => (item=autoconf) 
skipping: [localhost] => (item=automake) 
skipping: [localhost] => (item=cmake) 
skipping: [localhost] => (item=g++) 
skipping: [localhost] => (item=pkg-config) 
skipping: [localhost] => (item=unzip) 

TASK [nvim_from_source : Compile and update neovim] ****************************
skipping: [localhost]

TASK [nvim_from_source : Install neovim] ***************************************
skipping: [localhost]

TASK [bashrc_like_a_pro : Create bashrc when not exist] ************************
ok: [localhost]

TASK [bashrc_like_a_pro : Make sure some functions are in bashrc] **************
ok: [localhost]

TASK [Get my dotfiles] *********************************************************
ok: [localhost]

TASK [dotfiles : Make sure some system dependencies are installed] *************
ok: [localhost] => (item=stow)

TASK [dotfiles : Stow the destination] *****************************************
ok: [localhost]

TASK [vim_plug_installer : Check vim-plug script existance] ********************
ok: [localhost]

TASK [vim_plug_installer : Make sure autoload folder for vimplug exists] *******
ok: [localhost]

TASK [vim_plug_installer : If vim-plug script doesn't exist, install it] *******
skipping: [localhost]

TASK [rust_analyzer_from_source : Check if rust_analyzer is installed] *********
ok: [localhost]

TASK [rust_analyzer_from_source : Get latest source code for rust-analyzer] ****
ok: [localhost]

TASK [rust_analyzer_from_source : Compile and update rust_analyzer] ************
skipping: [localhost]

TASK [lua_luarocks_from_source : Check if lua is installed] ********************
ok: [localhost]

TASK [lua_luarocks_from_source : Download lua distribution] ********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Extract the source code] **********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Copy to repo to ~/repos] **********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Remove downloaded files] **********************
ok: [localhost] => (item=/tmp/lua-5.4.0.tar.gz)
ok: [localhost] => (item=/tmp/lua-5.4.0)

TASK [lua_luarocks_from_source : Make sure some system dependencies are installed] ***
skipping: [localhost] => (item=build-essential) 
skipping: [localhost] => (item=libreadline-dev) 

TASK [lua_luarocks_from_source : Compile and update lua] ***********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Install lua] **********************************
skipping: [localhost]

TASK [lua_luarocks_from_source : Check if luarocks is installed] ***************
ok: [localhost]

TASK [lua_luarocks_from_source : Download luarocks distribution] ***************
skipping: [localhost]

TASK [lua_luarocks_from_source : Extract the source code] **********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Copy to repo to ~/repos] **********************
skipping: [localhost]

TASK [lua_luarocks_from_source : Remove downloaded files] **********************
ok: [localhost] => (item=/tmp/luarocks-3.3.1.tar.gz)
ok: [localhost] => (item=/tmp/luarocks-3.3.1)

TASK [lua_luarocks_from_source : Make sure some system dependencies are installed] ***
skipping: [localhost] => (item=build-essential) 
skipping: [localhost] => (item=libreadline-dev) 

TASK [lua_luarocks_from_source : Configure before running build for luarocks] ***
skipping: [localhost]

TASK [lua_luarocks_from_source : Compile and update luarocks] ******************
skipping: [localhost]

TASK [lua_luarocks_from_source : Install luarocks] *****************************
skipping: [localhost]

TASK [pwsh_lsp_deps : Make sure invokebuild is installed] **********************
ok: [localhost]

TASK [pwsh_lsp_deps : Make sure psscriptanalyzer is installed] *****************
ok: [localhost]

TASK [pwsh_lsp_deps : Get latest source code for pwsh_lsp] *********************
ok: [localhost]

TASK [pwsh_lsp_deps : Compile and update pwsh_lsp] *****************************
skipping: [localhost]

TASK [vim_lsp_dependencies : Install LSP dependencies] *************************
ok: [localhost] => (item=clangd-10)
ok: [localhost] => (item=unzip)
ok: [localhost] => (item=clang-10)

TASK [vim_lsp_dependencies : Make sure clangd is properly symlinked] ***********
skipping: [localhost]

TASK [vim_lsp_dependencies : Check if luacheck is installed] *******************
ok: [localhost]

TASK [vim_lsp_dependencies : Install luacheck if not installed] ****************
skipping: [localhost]

TASK [vim_plugin_update : Update neovim plugin] ********************************
ok: [localhost]

TASK [docker_install : Check if docker is installed] ***************************
ok: [localhost]

TASK [docker_install : Make sure some system dependencies are installed] *******
skipping: [localhost] => (item=apt-transport-https) 
skipping: [localhost] => (item=ca-certificates) 
skipping: [localhost] => (item=curl) 
skipping: [localhost] => (item=gnupg-agent) 
skipping: [localhost] => (item=software-properties-common) 

TASK [docker_install : Download and Add docker Key to Apt-Get Keyring] *********
ok: [localhost]

TASK [docker_install : Add docker Repository into /etc/apt/sources.list - Bionic] ***
ok: [localhost]

TASK [docker_install : Install docker] *****************************************
ok: [localhost] => (item=docker-ce)
ok: [localhost] => (item=docker-ce-cli)
ok: [localhost] => (item=containerd.io)

TASK [docker_install : Add user to docker group] *******************************
ok: [localhost]

PLAY RECAP *********************************************************************
localhost                  : ok=43   changed=0    unreachable=0    failed=0    skipped=28   rescued=0    ignored=0   

