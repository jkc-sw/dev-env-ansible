---
- name: Make sure some functions are in bashrc
  blockinfile:
    path: "{{ bashrc_path }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    state: absent
    backup: true
    create: true
    block: |
      # Declare function to add path
      # https://unix.stackexchange.com/questions/14895/duplicate-entries-in-path-a-problem
      # Answer from: Gilles
      # answered Jun 13 '11 at 8:34
      function addThisPath() {
          case ":$PATH:" in
          *":$1:"*) :;; # already there
          *) PATH="$1:$PATH";; # or PATH="$PATH:$1"
          esac
      }
      addThisPath "$HOME/.cargo/bin"
      export TERM=xterm-256color
      if [[ -d "$HOME/.vim/plugged/fzf" ]]; then
          addThisPath "$HOME/.vim/plugged/fzf/bin"
          . "$HOME/.vim/plugged/fzf/shell/completion.bash"
          . "$HOME/.vim/plugged/fzf/shell/key-bindings.bash"
      fi
      set -o vi
      if command -v fd &>/dev/null; then
          export FZF_DEFAULT_COMMAND='fd --hidden --type file --color=always'
          export FZF_DEFAULT_OPTS="--ansi"
      elif command -v fdfind &>/dev/null; then
          export FZF_DEFAULT_COMMAND='fdfind --hidden --type file --color=always'
          export FZF_DEFAULT_OPTS="--ansi"
          alias fd=fdfind
      fi
      nv () {
          if command -v nvim &>/dev/null; then
              nvim $@
          fi
      }
      if [[ -x "$HOME/.vim/plugged/fzf/bin/fzf" ]]; then
          addThisPath "$HOME/.vim/plugged/fzf/bin"
          if [[ -d "$HOME/.vim/plugged/fzf/shell" ]]; then
              for f in $(ls  "$HOME/.vim/plugged/fzf/shell/"*.bash); do
                  . "$f"
              done
          fi
          alias his='eval "$(history | tac | sed -n "s/[ 0-9]\+\(.*\)/\1/p" | fzf)"'
      fi
      eval "$(starship init bash)"
      # Alias to trim newline and send to clipboard
      function toclip() {
          content=''
          # handle the different input
          # https://stackoverflow.com/questions/18761209/how-to-make-a-bash-function-which-can-read-from-standard-input?lq=1
          if [[ -t 0 ]]; then
              if [[ $# -gt 0 ]]; then
                  content="$(echo "$*")"
              fi
          else
              content="$(cat -)"
          fi
          if [[ -z $content ]]; then
              echowarning 'no value to copy to clipboard' >&2
              exit 1
          fi
          if [[ -z $SSH_CLIENT ]]; then
              if ! command -v clip.exe &>/dev/null; then
                  echo "clip.exe is not found" >&1
                  if ! command -v xclip &>/dev/null; then
                      echo "xclip is not installed either" >&1
                      exit 1
                  else
                      echo -n "$content" | clip.exe
                  fi
              else
                  echo -n "$content" | xclip -selection clipboard
              fi
          else
              content="$(echo -n $content | base64 -)"
              echo -ne "\e]52;c;$content\x07"
          fi
      }

- name: Comment out the conda init block from [bash/zsh]rc files to speed up terminal startup time, block before
  ansible.builtin.lineinfile:
    path: "{{ bashrc_path }}"
    insertbefore: '>>> conda initialize >>>'
    line: ": <<'EOF'"

- name: Comment out the conda init block from [bash/zsh]rc files to speed up terminal startup time, block after
  ansible.builtin.lineinfile:
    path: "{{ bashrc_path }}"
    insertafter: '<<< conda initialize <<<'
    line: "EOF"

- name: Do not bashrc append
  lineinfile:
    path: "{{ bashrc_path }}"
    line: ". '{{ bashrc_append_path }}'"
    state: absent
    backup: true
    create: true
