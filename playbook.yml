---
- hosts: local
  gather_facts: true
  vars:
    home_dir: "{{ ansible_env.HOME }}"
    bashrc_path: "{{ home_dir + '/.bashrc' }}"
    profile_path: "{{ home_dir + '/.profile' }}"
    vim_plug_script_path: "{{ home_dir + '/.local/share/nvim/site/autoload/plug.vim' }}"
    nvim_repos: "{{ home_dir + '/repos/neovim' }}"
    dotfiles_repos: "{{ home_dir + '/repos/dotfiles' }}"
    fd_repos: "{{ home_dir + '/repos/fd' }}"
    rg_repos: "{{ home_dir + '/repos/ripgrep' }}"
    ctags_repos: "{{ home_dir + '/repos/ctags' }}"
    cargo_default_bin: "{{ home_dir + '/.cargo/bin' }}"
  tasks:

    - name: See if system is reachable
      ping:
        data: "pong"

    - name: Make sure some functions are in bashrc
      blockinfile:
        path: "{{ bashrc_path }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        backup: true
        block: "{{ item }}"
      with_items:
        - |
          # Declare function to add path
          # https://unix.stackexchange.com/questions/14895/duplicate-entries-in-path-a-problem
          # Answer from: Gilles
          # answered Jun 13 '11 at 8:34
          function addThisPath() {
              case ":$PATH:" in
              *":$1:"*) :;; # already there
              *) PATH="$1:$PATH";; # or PATH="$PATH:$1"
              esac
          }
          addThisPath "$HOME/.cargo/bin"
          export TERM=xterm-256color
          if [[ -d "$HOME/.vim/plugged/fzf" ]]; then
              addThisPath "$HOME/.vim/plugged/fzf/bin"
              . "$HOME/.vim/plugged/fzf/shell/completion.bash"
              . "$HOME/.vim/plugged/fzf/shell/key-bindings.bash"
          fi
          set -o vi
          if command -v fd &>/dev/null; then
              export FZF_DEFAULT_COMMAND='fd --hidden --type file --color=always'
              export FZF_DEFAULT_OPTS="--ansi"
          elif command -v fdfind &>/dev/null; then
              export FZF_DEFAULT_COMMAND='fdfind --hidden --type file --color=always'
              export FZF_DEFAULT_OPTS="--ansi"
              alias fd=fdfind
          fi
          nv () {
              if command -v nvim &>/dev/null; then
                  nvim $@
              fi
          }
          if [[ -x "$HOME/.vim/plugged/fzf/bin/fzf" ]]; then
              addThisPath "$HOME/.vim/plugged/fzf/bin"
              if [[ -d "$HOME/.vim/plugged/fzf/shell" ]]; then
                  for f in $(ls  "$HOME/.vim/plugged/fzf/shell/"*.bash); do
                      . "$f"
                  done
              fi
              alias his='eval "$(history | tac | sed -n "s/[ 0-9]\+\(.*\)/\1/p" | fzf)"'
          fi

    - name: Make sure some system dependencies are installed
      become: true
      package:
        name: "{{ item }}"
        state: 'present'
      with_items:
        - git
        - gcc
        - make
        - wget
        - curl
        - stow
        - ninja-build
        - gettext
        - libtool
        - libtool-bin
        - autoconf
        - automake
        - cmake
        - g++
        - pkg-config
        - unzip
        - python3-docutils
        - libseccomp-dev
        - libjansson-dev
        - libyaml-dev
        - libxml2-dev

    - name: Check cargo and rustup is installed
      shell: command -v cargo && echo good || echo bad
      register: cargo_present
      changed_when: "'bad' in cargo_present.stdout"

    - name: Install cargo and rustup
      shell: curl https://sh.rustup.rs -sSf | bash -s - -y
      when: cargo_present.changed
      register: rustup_install
      args:
        warn: false

    - name: Make sure cargo export is not present in .profile
      when: rustup_install.changed
      lineinfile:
        path: "{{ profile_path }}"
        line: export PATH="$HOME/.cargo/bin:$PATH"
        state: absent
        backup: true

    - name: Check if fd is installed
      shell: command -v fd && echo good || echo bad
      register: fd_present
      changed_when: "'bad' in fd_present.stdout"

    - name: Get latest source code for fd/fd-find
      git:
        repo: https://github.com/sharkdp/fd.git
        dest: "{{ fd_repos }}"
        clone: true
        version: HEAD
        update: true
      register: git_clone_fd

    - name: Compile and update fd
      when: git_clone_fd.changed or fd_present.changed
      shell:
        cmd: "{{ cargo_default_bin }}/cargo install --path ."
        chdir: "{{ fd_repos }}"

    - name: Check if rg is installed
      shell: command -v rg && echo good || echo bad
      register: rg_present
      changed_when: "'bad' in rg_present.stdout"

    - name: Get latest source code for ripgrep
      git:
        repo: https://github.com/BurntSushi/ripgrep
        dest: "{{ rg_repos }}"
        clone: true
        version: HEAD
        update: true
      register: git_clone_rg

    - name: Compile and update rg
      when: git_clone_rg.changed or rg_present.changed
      shell:
        cmd: "{{ cargo_default_bin }}/cargo install --path ."
        chdir: "{{ rg_repos }}"

    - name: Check if ctags is installed
      shell: command -v ctags && echo good || echo bad
      register: ctags_present
      changed_when: "'bad' in ctags_present.stdout"

    - name: Get latest source code for ctags
      git:
        repo: https://github.com/universal-ctags/ctags.git
        dest: "{{ ctags_repos }}"
        clone: true
        version: HEAD
        update: true
      register: git_clone_ctags

    - name: Configure before running build for ctags
      when: git_clone_ctags.changed or ctags_present.changed
      shell:
        chdir: "{{ ctags_repos }}"
        cmd: |
          ./autogen.sh
          ./configure

    - name: Compile and update ctags
      when: git_clone_ctags.changed
      community.general.make:
        chdir: "{{ ctags_repos }}"
        target: install
      become: true

    - name: Check if nvim is installed
      shell: command -v nvim && echo good || echo bad
      register: nvim_present
      changed_when: "'bad' in nvim_present.stdout"

    - name: Get latest source code for neovim
      git:
        repo: https://github.com/neovim/neovim.git
        dest: "{{ nvim_repos }}"
        clone: true
        version: HEAD
        update: true
      register: git_clone_neovim

    - name: Compile and update neovim
      when: git_clone_neovim.changed or nvim_present.changed
      community.general.make:
        chdir: "{{ nvim_repos }}"
        target: all
        params:
          CMAKE_BUILD_TYPE: RelWithDebInfo
      register: compile_neovim

    - name: Install neovim
      when: compile_neovim.changed
      community.general.make:
        chdir: "{{ nvim_repos }}"
        target: install
      become: true

    - name: Check vim-plug script existance
      stat:
        path: "{{ vim_plug_script_path }}"
      register: vim_plug_script_result

    - name: Make sure autoload folder for vimplug exists
      file:
        path: "{{ vim_plug_script_path | dirname }}"
        state: directory
        mode: 1644

    - name: If vim-plug script doesn't exist, install it
      when: not vim_plug_script_result.stat.exists
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ vim_plug_script_path }}"
        mode: 0755

    - name: Get my dotfiles
      git:
        repo: https://github.com/jkc-sw/dotfiles.git
        dest: "{{ dotfiles_repos }}"
        clone: true
        version: HEAD
        update: true
      register: git_clone_dotfiles

    - name: Stow the destination
      when: git_clone_dotfiles.changed
      shell:
        cmd: |
          stow -t '{{ home_dir }}' -R tmux
          stow -t '{{ home_dir }}' -R nvim
        chdir: "{{ dotfiles_repos }}"
        executable: /bin/bash

    - name: Update neovim plugin
      shell:
        cmd: nvim -c 'PlugInstall' -c 'PlugUpdate' -c 'qa'
      args:
        warn: false
      register: update_nvim_plugin
      changed_when: update_nvim_plugin.rc != 0

