---
# - name: Check if the powershell is installed
#   shell: command -v pwsh && echo good || echo bad
#   register: powershell_present
#   changed_when: "'bad' in powershell_present.stdout"

- name: Make sure some system dependencies are installed
  become: true
  apt:
    name: "{{ item }}"
    state: 'present'
  loop:
    - xz-utils

- name: Download and Add Powershell Key to Apt-Get Keyring
  become: true
  apt:
    deb: "https://packages.microsoft.com/config/ubuntu/{{ ansible_lsb.release }}/packages-microsoft-prod.deb"
    state: present

- name: Install Powershell
  become: true
  apt:
    name: powershell
    state: present
    update_cache: true

- name: Make sure we can install from PSGallery
  shell:
    cmd: |
      if ((Get-PSRepository -Name PSGallery).InstallationPolicy -ne 'Trusted')
      {
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      }
    executable: /usr/bin/pwsh
  register: ps_allow_psgallery
  changed_when: "ps_allow_psgallery.rc != 0"

- name: Create profile.ps1 directory
  file:
    path: "{{ pwshrc_dir | dirname }}"
    state: directory

- name: Configure powershell
  blockinfile:
    path: "{{ pwshrc_dir }}"
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    backup: true
    block: |
      # Set the VI mode
      Set-PSReadlineOption -EditMode vi
      Invoke-Expression (& starship init powershell)

- name: Make sure Pester is installed
  shell:
    cmd: |
      if ('Pester' -notin (Get-Module -ListAvailable | Select-Object -ExpandProperty Name))
      {
          Install-Module Pester -Scope CurrentUser -AcceptLicense
      }
    executable: /usr/bin/pwsh
  register: ps_install_invokebuild
  changed_when: "ps_install_invokebuild.rc != 0"

- name: Make sure PSSlack is installed
  shell:
    cmd: |
      if ('PSSlack' -notin (Get-Module -ListAvailable | Select-Object -ExpandProperty Name))
      {
          Install-Module PSSlack -Scope CurrentUser -AcceptLicense
      }
    executable: /usr/bin/pwsh
  register: ps_install_psslack
  changed_when: "ps_install_psslack.rc != 0"

- name: Make sure PoshBot is installed
  shell:
    cmd: |
      if ('PoshBot' -notin (Get-Module -ListAvailable | Select-Object -ExpandProperty Name))
      {
          Install-Module PoshBot -Scope CurrentUser -AcceptLicense
      }
    executable: /usr/bin/pwsh
  register: ps_install_poshbot
  changed_when: "ps_install_poshbot.rc != 0"

- name: Make sure Microsoft.Graph is installed
  shell:
    cmd: |
      if ('Microsoft.Graph' -notin (Get-Module -ListAvailable | Select-Object -ExpandProperty Name))
      {
          Install-Module Microsoft.Graph -Scope CurrentUser -AcceptLicense
      }
    executable: /usr/bin/pwsh
  register: ps_install_msgraph
  changed_when: "ps_install_msgraph.rc != 0"


